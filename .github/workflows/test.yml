name: Build and Deploy - be-banner

on:
  push:
    branches:
      - main
    paths:
      - 'be-banner/**'
env:
  SERVICE_NAME: be-banner  # 👈 这里设置的是全局环境变量


jobs:
  build-be-banner:
    if: github.repository == 'asynccnu/ccnubox-be'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Aliyun Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}
          registry: crpi-vgud82zncz8nwfuc.cn-hangzhou.personal.cr.aliyuncs.com

      - name: Build and push image
        run: |
          chmod +x ./scripts/build-${SERVICE_NAME}.sh
          ./scripts/build-${SERVICE_NAME}.sh ${{ secrets.IMAGE_REPO }}
  deploy-on-dev:
    if: github.repository == 'asynccnu/ccnubox-be'
    runs-on: ubuntu-latest
    needs: build-be-banner
    steps:
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_SERVER }} >> ~/.ssh/known_hosts
      - name: SSH into server and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER }} << EOF
            cd ~/ccnubox_v3
            docker rm -f ${SERVICE_NAME}
            docker rmi -f ${{ secrets.IMAGE_REPO }}/${SERVICE_NAME}:v1
            docker compose up -d ${SERVICE_NAME}
          EOF

  deploy-on-server:
    if: github.repository == 'asynccnu/ccnubox-be'
    runs-on: ubuntu-latest
    needs: build-be-banner
    steps:
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_ADDR }} >> ~/.ssh/known_hosts

      - name: SSH into server and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_ADDR }} << EOF
            cd ~/ccnubox
            kubectl apply -f namespace.yaml || true
            kubectl apply -f config-map.yaml || true
            kubectl delete -f ${SERVICE_NAME}.yaml || true
            kubectl apply -f ${SERVICE_NAME}.yaml || true
          EOF